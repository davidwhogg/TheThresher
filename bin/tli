#!/usr/bin/env python
"""
This file is part of The Thresher.
"""

import os
import sys
import glob
import logging
import numpy as np
import pyfits

# This heinous hack let's me run this script without actually installing the
# `thresher` module. I learned this from Steve Losh at:
#     https://github.com/sjl/d/blob/master/bin/d
try:
    import thresher
    thesher = thresher  # Y'know...
except ImportError:
    sys.path.append(os.path.abspath(os.path.join(__file__, '..', '..')))
    import thresher
    thresher = thresher  # N.B.D.

if __name__ == '__main__':
    import argparse

    # Start by parsing the command line arguments.
    desc = "Run traditional lucky imaging."
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("glob", type=str,
            help="The glob that the imaging data should satisfy.")
    parser.add_argument("--hdu", type=int, default=0,
            help="The HDU number for the data.")
    parser.add_argument("--masks", type=str, default=None,
            help="The glob that the mask data files satisfy.")
    parser.add_argument("--type", type=str, default="invvar",
            choices=["invvar", "var", "sigma"],
            help="The type of mask data.")
    parser.add_argument("-o", "--output", type=str, default=None,
            help="The output file.")
    parser.add_argument("-t", "--top", type=int, nargs='+', default=None,
            help="Co-add the top N images")
    parser.add_argument("--no_shift", action="store_true",
            help="Assume that the images are properly registered so don't "
                + "shift before adding.")
    parser.add_argument("--second", action="store_true",
            help="Run a second pass to deal with offset problems.")
    parser.add_argument("--log", type=str, default=None,
            help="The filename for the log.")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="Enable verbose logging.")
    args = parser.parse_args()

    if args.output is None:
        outfn = "lucky-trad.fits"
    else:
        outfn = args.output
    outfn = os.path.abspath(outfn)

    try:
        os.makedirs(os.path.split(outfn)[0])
    except os.error:
        pass

    # Set up the `logging` module with the settings provided at the command
    # line.
    loglevel = logging.INFO
    if args.verbose:
        loglevel = logging.DEBUG
    if args.log is None:
        logging.basicConfig(level=loglevel)
    else:
        logfn = args.log
        logging.basicConfig(filename=logfn, level=loglevel, filemode="w")

    # Figure out how to deal with masks.
    if args.type == "invvar":
        invert, square = False, False
    elif args.type == "var":
        invert, square = True, False
    elif args.type == "sigma":
        invert, square = True, True

    # Find mask list.
    if args.masks is None:
        mask_list = None
    else:
        mask_list = glob.glob(args.masks)

    # Run the pipeline.
    image_list = glob.glob(args.glob)
    fns, masks, ranks, centers, final = thresher.run_tli(image_list,
            top=args.top, shift=not args.no_shift, mask_list=mask_list,
            invert=invert, square=square, hdu=args.hdu)

    if args.second:
        # Run a second pass correlating with the scene from the previous pass.
        scene = thresher.utils.trim_image(final[0],
                int(0.5 * np.mean(final.shape)))
        fns, masks, ranks, centers, final = thresher.run_tli(image_list,
                top=args.top, shift=not args.no_shift, mask_list=mask_list,
                invert=invert, square=square, scene=scene, hdu=args.hdu)

    fns = [os.path.split(fn)[-1] for fn in fns]

    # Get the maximum file length.
    length = 0
    if mask_list is not None:
        masks = [os.path.split(fn)[-1] for fn in masks]
        length = np.max([len(f) for f in masks])
    length = np.max([np.max([len(f) for f in fns]), length])

    # Metadata table HDU.
    col1 = pyfits.Column(name="filename", format="{0:d}A".format(length),
            array=np.array(fns))
    col2 = pyfits.Column(name="mask", format="{0:d}A".format(length),
            array=np.array(masks))
    col3 = pyfits.Column(name="rank", format="E", array=np.array(ranks))
    col4 = pyfits.Column(name="x0", format="E", array=centers[:, 0])
    col5 = pyfits.Column(name="y0", format="E", array=centers[:, 1])
    cols = pyfits.ColDefs([col1, col2, col3, col4, col5])
    table_hdu = pyfits.new_table(cols)
    table_hdu.header.update("invert", invert)
    table_hdu.header.update("square", square)
    table_hdu.header.update("hdunum", args.hdu)

    # Full co-add HDU.
    image_hdu = pyfits.PrimaryHDU(final[-1])
    image_hdu.header.update("cli", " ".join(sys.argv))
    hdus = [image_hdu]
    if args.top is not None:
        if len(args.top) > 0:
            for i, t in enumerate(args.top):
                hdus += [pyfits.ImageHDU(final[i])]
                hdus[-1].header.update("number", t)
    hdus += [table_hdu]

    pyfits.HDUList(hdus).writeto(outfn, clobber=True)
