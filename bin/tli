#!/usr/bin/env python
"""
This file is part of The Thresher.
"""

import os
import sys
import glob
import logging
import numpy as np
import pyfits

# This heinous hack let's me run this script without actually installing the
# `thresher` module. I learned this from Steve Losh at:
#     https://github.com/sjl/d/blob/master/bin/d
try:
    import thresher
    thesher = thresher  # Y'know...
except ImportError:
    sys.path.append(os.path.abspath(os.path.join(__file__, '..', '..')))
    import thresher
    thresher = thresher  # N.B.D.

if __name__ == '__main__':
    import argparse

    # Start by parsing the command line arguments.
    desc = "Run traditional lucky imaging."
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("glob", type=str,
            help="The glob that the imaging data should satisfy")
    parser.add_argument("-o", "--output", type=str, default=None,
            help="The output file.")
    parser.add_argument("-t", "--top", type=int, nargs='+', default=None,
            help="Co-add the top N images")
    parser.add_argument("--no_shift", action="store_true",
            help="Assume that the images are properly registered so don't "
                + "shift and add.")
    parser.add_argument("--log", type=str, default=None,
            help="The filename for the log.")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="Enable verbose logging.")
    args = parser.parse_args()

    if args.output is None:
        outfn = "lucky-trad.fits"
    else:
        outfn = args.output
    outfn = os.path.abspath(outfn)

    try:
        os.makedirs(os.path.split(outfn)[0])
    except os.error:
        pass

    # Set up the `logging` module with the settings provided at the command
    # line.
    loglevel = logging.INFO
    if args.verbose:
        loglevel = logging.DEBUG
    if args.log is None:
        logging.basicConfig(level=loglevel)
    else:
        logfn = args.log
        logging.basicConfig(filename=logfn, level=loglevel, filemode="w")

    # Run the pipeline.
    image_list = glob.glob(args.glob)
    fns, ranks, centers, final = thresher.run_tli(image_list, top=args.top,
            shift=not args.no_shift)
    fns = [os.path.split(fn)[-1] for fn in fns]

    col1 = pyfits.Column(name="filename", format="30A", array=np.array(fns))
    col2 = pyfits.Column(name="rank", format="E", array=np.array(ranks))
    col3 = pyfits.Column(name="x0", format="E", array=centers[:, 0])
    col4 = pyfits.Column(name="y0", format="E", array=centers[:, 1])
    cols = pyfits.ColDefs([col1, col2, col3, col4])
    table_hdu = pyfits.new_table(cols)
    image_hdu = pyfits.PrimaryHDU(final[-1])
    image_hdu.header.update("cli", " ".join(sys.argv))
    hdus = [image_hdu]
    if args.top is not None:
        if len(args.top) > 0:
            for i, t in enumerate(args.top):
                hdus += [pyfits.ImageHDU(final[i])]
                hdus[-1].header.update("number", t)
    hdus += [table_hdu]

    pyfits.HDUList(hdus).writeto(outfn, clobber=True)
